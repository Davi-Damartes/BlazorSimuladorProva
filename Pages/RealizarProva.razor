@page "/RealizarProva"
@inject ProvaService Prova
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

@if (Prova.ProvaInstancia.Perguntas.Count() == 0)
{
    <MudContainer>
        <MudText Typo="Typo.h3"
                 Align="Align.Center"
                 Style="margin-top: 18px;"
                 Color="Color.Warning">
            <b>Não há uma Prova criada!</b>
        </MudText>

        <div class="CentralizarConteudo">
            <MudButton ButtonType="ButtonType.Button"
                       Variant="Variant.Filled"
                       Color="Color.Error"
                       Href="/CriarPerguntas"
                       Style="margin-top: 15px; font-size: 35px; border-radius: 19px;">
                Clique Aqui para Criar um Prova!
            </MudButton>
        </div>
    </MudContainer>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Medium">
        <MudPaper Elevation="15" Height="100%" Width="100%" Class="pa-16 ma-2" Outlined="true"
                  Style="@($"color:{Theme.Palette.Tertiary}; background:{Colors.Shades.White};")">


            @foreach (var pergunta in Prova.ProvaInstancia.Perguntas)
            {
                <MudText Align="Align.Start"
                         Style="@($"color:{Theme.Palette.DarkDarken}; font-size: 30px; margin-bottom: 10px;")"
                         Class="QuebraLinha">
                    <b>(@pergunta.NumeroPergunta)@pergunta.EnunciadoDaPergunta</b>
                </MudText>
                @foreach (var questao in pergunta.Questoes)
                {
                    <MudRadioGroup @bind-selectValue="ProvaResposta!.RespostaSelecionada"
                                   T="EOpcaoAlternativa"
                                   Style="margin-left: 15px"
                                   Required="true"
                                   RequiredError="Campo obrigado">
                        @foreach (var alternativa in questao.ListaAlternativas)
                        {
                            <MudItem xs="12" Class=" mud-elevation-4 mud-spacing">
                                <MudPaper Class="d-flex align-center justify-between mud-width-full py-8"
                                          Style="margin-bottom: 20px;" Width="100%">
                                    <MudRadio Value="alternativa.OpcaoAlternativa"
                                              Color="Color.Secondary"
                                              Size="Size.Large"
                                              @onchange="(e) => GabaritoProva(pergunta, alternativa)">
                                    </MudRadio>
                                    <MudText Class="QuebraLinha"
                                             Style="@($"color:{Theme.Palette.Dark}; background:{Colors.Shades.White}; font-size: 25px; Width: 80%;")"
                                             Align="Align.Start">
                                        <b>@alternativa.OpcaoAlternativa)</b>@alternativa.TextoDasAlternativa
                                    </MudText>
                                </MudPaper>
                            </MudItem>
                        }
                    </MudRadioGroup>

                    <MudDivider Style="@($"color:{Theme.Palette.Dark}; background:{Colors.Shades.White}; margin-top: 20px;margin-bottom: 30px")">
                    </MudDivider>
                }
            }

            <div class="CentralizarConteudo">
                <MudChip Color="Color.Info" T="string" Variant="Variant.Filled"
                         Style="font-size: 40px">
                    @CodigoProva
                </MudChip>
            </div>
            <div class="CentralizarConteudo">
                <MudText Color="Color.Info" Style="margin-top: 5px"
                         Typo="Typo.h5" Align="Align.Center">
                    Digite o código no campo abaixo para Enviar a Prova!
                </MudText>
            </div>
            <div class="CentralizarConteudo specific-page">
                <MudPaper>
                    <MudFocusTrap Disabled="Disabled" DefaultFocus="DefaultFocus">
                        <MudTextField @bind-Value="@CodigoDigitadoUser" Class="mud-input-slot"
                                      T="string" Style="font-size: 20px;"
                                      Variant="Variant.Outlined" />
                    </MudFocusTrap>
                </MudPaper>
            </div>


            <div class="CentralizarConteudo">
                <MudButton OnClick="ConfirmarEnvio" Color="Color.Success"
                           Variant="Variant.Filled" 
                           Class="CentralizarConteudo"
                           Style="border-radius: 12px; font-size: 30px; margin-top: 30px;">
                    Enviar Prova
                </MudButton>
            </div>
        </MudPaper>
    </MudContainer>

}
@code {

    bool Disabled { get; set; }

    DefaultFocus DefaultFocus { get; set; } = DefaultFocus.FirstChild;


    public MudTheme Theme = new MudTheme();

    public RespostasDaProva? ProvaResposta { get; set; } = new();

    public Alternativa? AlternativaProva { get; set; } = new();


    public string? CodigoProva { get; set; }

    public string? CodigoDigitadoUser{ get; set; }


    protected override void OnInitialized( )
    {
        CodigoProva = GerarCodigo();
    }

    private void GabaritoProva(Pergunta pergunta, Alternativa alternativa)
    {
        if (alternativa!.IsCorreta == true &&
            ProvaResposta.PerguntasCertas.All(x => x.NumeroPergunta != pergunta.NumeroPergunta))
        {
            ProvaResposta.PerguntasCertas.Add(pergunta);
            ProvaResposta.NumeroPergunta.Add(pergunta.NumeroPergunta);
        }
        else
        {

        }
    }

    private void ConfirmarEnvio( )
    {
        if (CodigoDigitadoUser == CodigoProva)
        {
            NavigationManager.NavigateTo("/ResultadoProva");
        }
        else
        {
            var diagloParams = new DialogParameters<DialogGenerico>()
                {
                    {x => x.Titulo, "Verificação Código"},
                    {x => x.Conteudo, "Código Errado"},
                    {x => x.TextoButao, "Ok"},

                };
                var diagloOptions = new DialogOptions()
                    {
                        CloseButton = true,
                        MaxWidth = MaxWidth.ExtraSmall,
                        Position = DialogPosition.Center,
                        CloseOnEscapeKey = true

                    };

            DialogService.Show<DialogGenerico>(" ", diagloParams, diagloOptions);
        }
    }

    private async Task OpenDialogAsync( )
    {
        var CodigoRandom = GerarCodigo();

        var diagloParams = new DialogParameters<DialogEnvioProvaCodigo>()
        {
            {x => x.CodigoRandom, CodigoRandom},
        };
        var diagloOptions = new DialogOptions()
            {
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                Position = DialogPosition.Center,
                CloseOnEscapeKey = true

            };

        var dialog = await DialogService.ShowAsync<DialogEnvioProvaCodigo>(" ", diagloParams, diagloOptions);

    }


    public string GerarCodigo( )
    {
        Random aleatorio = new Random();

        // String that contain both alphabets and numbers
        String strings_Letras = "abcdefghijklmnopqrstuvwxyz0123456789";
        int size = 8;

        // Initializing the empty string
        String stringAleatoria = "";

        for (int i = 0; i < size; i++)
        {

            // Selecting a index randomly
            int indexAleatorio = aleatorio.Next(strings_Letras.Length);

            stringAleatoria = stringAleatoria + strings_Letras[indexAleatorio];
        }

        return stringAleatoria;
    }

}


