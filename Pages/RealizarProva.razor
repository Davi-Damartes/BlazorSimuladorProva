@page "/realizarProva"

@inject ProvaService Prova
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<PageTitle>Realizar a Prova</PageTitle>


@if (Prova.ProvaInstancia.ProvaFinalizada)
{
    NavigationManager.NavigateTo("resultadoProva");
}
@if (Prova.ProvaInstancia.Perguntas.Count() == 0)
{
    <MudContainer>
        <div class="d-flex align-center justify-center ">
            <MudText Typo="Typo.h3"
                     Align="Align.Center"
                     Style="margin-top: 18px;"
                     Color="Color.Warning">
                <b>Não há uma Prova criada!</b>
            </MudText>
        </div>
        <div class="d-flex align-center justify-center ">
            <MudButton ButtonType="ButtonType.Button"
                       Variant="Variant.Filled"
                       Color="Color.Error"
                       Href="criarPerguntas"
                       Style="margin-top: 15px; font-size: 35px; border-radius: 19px;">
                Clique Aqui para Criar uma Prova!
            </MudButton>
        </div>
        <div class="d-flex align-center justify-center ">
            <MudText Typo="Typo.h3"
                     Align="Align.Center"
                     Style="margin-top: 18px;"
                     Color="Color.Warning">
                <b>Ou entre em contato com o seu Professor!</b>
            </MudText>
        </div>
    </MudContainer>
}
else
{
    <MudPaper Class="mud-theme-provider">
        <MudContainer MaxWidth="MaxWidth.Medium">
            <MudPaper Elevation="15" Square="true"
                      Height="auto" Width="100%"
                      Class="pa-6 ma-2 mud-theme-provider-paper">


                <div class="d-flex align-center justify-center ">
                    <MudText Typo="Typo.h3" Style="margin-bottom: 25px;" Align="Align.Center">
                        <p>Realização da Prova!!!</p>
                    </MudText>
                </div>
                <div class="d-flex align-start justify-start ">
                    <MudText Typo="Typo.h5" Align="Align.Start">
                        <p>Professor: <b>@Prova.ProvaInstancia.NomeProfessor.ToUpper()</b></p>
                    </MudText>
                </div>
                <div class="d-flex align-start justify-start ">
                    <MudText Typo="Typo.h5" Style="margin-bottom: 50px" Align="Align.Start">
                        <p>Matéria: <b>@Prova.ProvaInstancia.TipoProva.ToString().Replace("_", " ")</b></p>
                    </MudText>
                </div>

                @foreach (var pergunta in Prova.ProvaInstancia.Perguntas.OrderBy(x => x.NumeroPergunta))
                {
                    <MudText Align="Align.Start" Style="font-size: 30px; margin-bottom: 10px;"
                             Class="mud-theme-provider-text QuebraLinha">
                        <b>(@pergunta.NumeroPergunta)@pergunta.EnunciadoDaPergunta</b>
                    </MudText>
                    @foreach (var questao in pergunta.Questoes)
                    {
                        <MudRadioGroup @bind-SelectValue="ProvaResposta.RespostaSelecionada"
                                       T="EOpcaoAlternativa"
                                       Style="margin-left: 15px"
                                       Required="true"
                                       RequiredError="Campo obrigado">
                            @foreach (var alternativa in questao.ListaAlternativas)
                            {
                                <MudItem sm="12" s Class=" mud-elevation-4 mud-spacing">
                                    <MudPaper Class="d-flex align-center justify-between"
                                              Style="margin-bottom: 20px;" Width="100%">
                                        <MudRadio Value="alternativa.OpcaoAlternativa"
                                                  Color="Color.Secondary"
                                                  Size="Size.Large"
                                                  @onchange="(e) => GabaritoProva(pergunta, alternativa)">
                                        </MudRadio>
                                        <MudText Class="QuebraLinha" Color="Color.Warning"
                                                 Style="font-size: 25px; Width: 90%;"
                                                 Align="Align.Start">
                                            <b style="color: gray">@alternativa.OpcaoAlternativa)</b>@alternativa.TextoDasAlternativa
                                        </MudText>
                                    </MudPaper>
                                </MudItem>
                            }
                        </MudRadioGroup>

                        <MudDivider Style="@($"color:{Theme.Palette.Dark}; background:{Colors.Shades.White}; margin-top: 20px;margin-bottom: 30px")">
                        </MudDivider>
                    }
                }

                <div class="d-flex align-center justify-center ">
                    <MudChip Color="Color.Info" T="string" Variant="Variant.Filled"
                             Style="height: 50px; width: 200px; margin-left: 20px;">
                        <MudText Typo="Typo.h4">
                            @CodigoProva
                        </MudText>
                    </MudChip>
                    <MudIconButton Style="" OnClick="GerarOutroCódigo" Variant="Variant.Outlined"
                                   Icon="@Icons.Material.Filled.Refresh" Color="Color.Info">
                    </MudIconButton>
                </div>
                <div class="d-flex align-center justify-center">
                    <MudText Color="Color.Info" Style="margin-top: 5px;" Typo="Typo.h5" Align="Align.Center"
                             Class="mud-theme-provider-text">
                        Digite o código no campo abaixo para Enviar a Prova
                    </MudText>
                </div>
                <div class="d-flex align-center justify-center">
                    <MudFocusTrap Disabled="Disabled" DefaultFocus="DefaultFocus.None">
                        <MudTextField @bind-Value="@CodigoDigitadoUser" T="string" Label="Digite Aqui!"
                                      Style="font-size: 20px; margin-top: 20px;" Variant="Variant.Outlined"
                                      Class="mud-theme-provider-textfield" />
                    </MudFocusTrap>
                </div>
                <div class="d-flex align-center justify-center">
                    <MudButton OnClick="ConfirmarEnvio" Color="Color.Success"
                               Variant="Variant.Filled"
                               Disabled="@habilitarbutton"
                               Style="border-radius: 12px; margin-top: 30px; font-size: 32px;" Class="mud-theme-provider-button">
                        <b>Enviar Prova</b>
                    </MudButton>
                </div>
            </MudPaper>
        </MudContainer>
    </MudPaper>
}
@if (Prova.ProvaInstancia.ProvaFinalizada)
{
    NavigationManager.NavigateTo("resultadoProva");
}

@code {

    bool Disabled { get; set; }

    DefaultFocus DefaultFocus { get; set; } = DefaultFocus.FirstChild;


    public MudTheme Theme = new MudTheme();

    public RespostasDaProva? ProvaResposta { get; set; } = new();

    public List<RespostasDaProva>? ListaRespotas { get; set; } = new();

    public EOpcaoAlternativa OpcaoRadio { get; set; } = new();

    public Alternativa? AlternativaProva { get; set; } = new();

    public int NumeroAcertos { get; set; }


    public bool habilitarbutton = true;


    public string? CodigoProva { get; set; }

    public string? CodigoDigitadoUser { get; set; }


    protected override void OnInitialized( )
    {
        CodigoProva = GerarCodigo();

    }


    private void GabaritoProva(Pergunta pergunta, Alternativa alternativa)
    {
        var respostaExistente = ListaRespotas.FirstOrDefault(r => r.NumeroPergunta == pergunta.NumeroPergunta);

        if (respostaExistente != null)
        {
            respostaExistente.RespostaSelecionada = alternativa.OpcaoAlternativa;
            respostaExistente.AcertouPergunta = alternativa.IsCorreta;
        }
        else
        {
            ListaRespotas.Add(new RespostasDaProva
                {
                    NumeroPergunta = pergunta.NumeroPergunta,
                    RespostaSelecionada = alternativa.OpcaoAlternativa,
                    AcertouPergunta = alternativa.IsCorreta
                });
        }

        if (ListaRespotas.Count == Prova.ProvaInstancia.QuantidadePerguntas)
        {
            habilitarbutton = false;
        }
    }



    private void ConfirmarEnvio( )
    {

        Prova.ProvaInstancia.QuantidadeAcertos = ListaRespotas!.AsQueryable().Where(x => x.AcertouPergunta == true).Count();

        Prova.ProvaInstancia.AlternativasCorretas = ListaRespotas.Where(r => r.AcertouPergunta).Select(r => r.NumeroPergunta).ToList();


        if (string.IsNullOrWhiteSpace(CodigoDigitadoUser))
        {
            AbrirDialog("Código não declarado!", "Insira a código para Enviar a Prova!", "Ok");
            return;
        }

        if (CodigoDigitadoUser.ToUpper() == CodigoProva)
        {
            Prova.ProvaInstancia.ProvaFinalizada = true;
            NavigationManager.NavigateTo("resultadoProva");
        }
        else
        {
            AbrirDialog("Verificação Código", "Código Errado", "Ok");
        }
    }

    private void AbrirDialog(string titulo, string conteudo, string textoBotao)
    {
        var parameters = new DialogParameters<DialogGenerico>()
        {
            {x => x.Titulo, titulo},
            {x => x.Conteudo, conteudo},
            {x => x.TextoButao, textoBotao}
        };

        var options = new DialogOptions()
            {
                CloseButton = false,
                MaxWidth = MaxWidth.ExtraSmall,
                Position = DialogPosition.Center,

            };

        DialogService.Show<DialogGenerico>("Confirmaçao", parameters, options);
    }



    private void GerarOutroCódigo( )
    {
        CodigoProva = GerarCodigo();
    }

    private string GerarCodigo( )
    {
        Random aleatorio = new Random();

        String strings_Letras = "abcdefghijklmnopqrstuvwxyz0123456789";
        int tamanhoCodigo = 6;

        String stringsAleatoria = "";

        for (int i = 0; i < tamanhoCodigo; i++)
        {

            int indexAleatorio = aleatorio.Next(strings_Letras.Length);

            stringsAleatoria = stringsAleatoria + strings_Letras[indexAleatorio];
        }

        return stringsAleatoria.ToUpper();
    }

}