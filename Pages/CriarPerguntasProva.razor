@page "/CriarPerguntasProva"

@inject ProvaService Prova
@inject IDialogService DialogService


@if (mostrarAlert)
{
    <MudAlert Severity="Severity.Error"
              ContentAlignment="HorizontalAlignment.Center"
              ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(false))">
        @Erros
    </MudAlert>
}
else @if (string.IsNullOrEmpty(Prova.ProvaInstancia.NomeProfessor))
{
    <MudText Typo="Typo.h3"
             Class="d-flex align-center justify-center"
             Color="Color.Warning">
        Não existe uma prova!!!
    </MudText>

    <MudButton ButtonType="ButtonType.Button"
               Variant="Variant.Filled"
               Color="Color.Error"
               Size="Size.Small"
               Href="/CriarProva"
               Class="d-flex align-center"
               Style="margin-top: 15px;">
        Clique Aqui para Criar uma Prova
    </MudButton>
}
else
{

    <MudPaper Height="100%" Width="100%">
        <MudContainer MaxWidth="MaxWidth.Large">
            <MudForm @ref="@form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudText Typo="Typo.h4" 
                         Class="d-flex align-center justify-center"
                         Style="margin-top: 45px; margin-bottom: 15px;">
                    Pegunta (@NumeroQuestao)
                </MudText>

                <div class="mb-5">
                    <MudPaper Style="margin-bottom: 40px;">
                        <MudText Class="mud-spacing-md pd-4">
                            <b>Digite o Enunciado da {@NumeroQuestao} Questão </b>
                        </MudText>
                        <MudTextField @bind-Value="UmaPergunta.EnunciadoDaPergunta"
                                      Lines="4"
                                      T="string"
                                      Required="true"
                                      RequiredError="Campo Obrigatorio"
                                      Label="Enunciado da Questão"
                                      Disabled="@botaoDasOpcoesCorretas"
                                      Variant="Variant.Text" />
                    </MudPaper>
                </div>

                <div class="mb-3 mt-5">
                    <MudGrid>
                        <MudItem xs="12" Class="mud-elevation-4 mud-spacing">
                            <MudPaper>
                                <MudTextField @bind-Value="AlternativaModel1!.TextoDasAlternativa"
                                              Required="true"
                                              RequiredError="Campo Obrigatório"
                                              Lines="4"
                                              Label="Alternativa A"
                                              InputType="InputType.Text"
                                              Variant="Variant.Text"
                                              Disabled="@AlternativaModel1!.alternativaAdicionada" />
                            </MudPaper>
                            <MudRadioGroup @bind-Value="AlternativaModel1.IsCorreta"
                                           Required="true">
                                <MudRadio Value="true"
                                          Color="Color.Secondary"
                                          Size="Size.Large"
                                          Disabled="botaoDasOpcoesCorretas"
                                          @onchange="(e) => MarcarAlternativaComoCorreta(AlternativaModel1)">
                                    Alternativa Correta?
                                </MudRadio>
                            </MudRadioGroup>
                        </MudItem>
                        <MudItem xs="12">
                            <div class="mb-4">
                                <MudButton OnClick="(() => AdicionarAlternativa(AlternativaModel1!))"
                                           Variant="Variant.Filled"
                                           Color="Color.Success"
                                           Disabled="@AlternativaModel1!.alternativaAdicionada">
                                    Adicionar Alternataiva A
                                </MudButton>
                            </div>
                        </MudItem>
                    </MudGrid>
                </div>

                <div class="mb-3">
                    <MudGrid>
                        <MudItem xs="12" Class="mud-elevation-4 mud-spacing">
                            <MudPaper>
                                <MudTextField @bind-Value="AlternativaModel2!.TextoDasAlternativa"
                                              Required="true"
                                              RequiredError="Campo Obrigatório"
                                              Lines="4"
                                              Variant="Variant.Text"
                                              Label="Alternativa B"
                                              InputType="InputType.Text"
                                              Disabled="@AlternativaModel2.alternativaAdicionada" />
                            </MudPaper>
                            <MudRadioGroup @bind-Value="AlternativaModel2.IsCorreta"
                                           Required="true" RequiredError="Campo obrigado">
                                <MudRadio Value="true"
                                          Color="Color.Secondary"
                                          Size="Size.Large"
                                          Disabled="botaoDasOpcoesCorretas"
                                          @onchange="(e) => MarcarAlternativaComoCorreta(AlternativaModel2)">
                                    Alternativa Correta?
                                </MudRadio>
                            </MudRadioGroup>
                        </MudItem>
                        <MudItem xs="12">
                            <div class="mb-4">
                                <MudButton OnClick="(() => AdicionarAlternativa(AlternativaModel2))"
                                           Variant="Variant.Filled"
                                           Color="Color.Success"
                                           Disabled="@AlternativaModel2.alternativaAdicionada">
                                    Adicionar Alternataiva B
                                </MudButton>
                            </div>
                        </MudItem>
                    </MudGrid>
                </div>

                <div class="mb-3">
                    <MudGrid>
                        <MudItem xs="12" Class="mud-elevation-4 mud-spacing">
                            <MudPaper>
                                <MudTextField @bind-Value="AlternativaModel3!.TextoDasAlternativa"
                                              Required="true"
                                              RequiredError="Campo Obrigatório"
                                              Lines="4"
                                              Label="Alternativa C"
                                              Variant="Variant.Text"
                                              InputType="InputType.Text"
                                              Disabled="@AlternativaModel3.alternativaAdicionada" />
                            </MudPaper>
                            <MudRadioGroup @bind-Value="AlternativaModel3.IsCorreta">
                                <MudRadio Value="true"
                                          Color="Color.Secondary"
                                          Disabled="botaoDasOpcoesCorretas"
                                          @onchange="(e) => MarcarAlternativaComoCorreta(AlternativaModel3)"
                                          Size="Size.Large">
                                    Alternativa Correta?
                                </MudRadio>
                            </MudRadioGroup>
                        </MudItem>
                        <MudItem xs="12">
                            <div class="mb-4">
                                <MudButton OnClick="(() => AdicionarAlternativa(AlternativaModel3))"
                                           Variant="Variant.Filled"
                                           Color="Color.Success"
                                           Disabled="@AlternativaModel3.alternativaAdicionada">
                                    Adicionar Alternataiva C
                                </MudButton>
                            </div>
                        </MudItem>
                    </MudGrid>
                </div>

                <div class="mb-3">
                    <MudGrid Style="margin-bottom: 20px;">
                        <MudItem xs="12" Class="mud-elevation-4 mud-spacing">
                            <MudPaper>
                                <MudTextField @bind-Value="AlternativaModel4!.TextoDasAlternativa"
                                              Required="true"
                                              RequiredError="Campo Obrigatório"
                                              Lines="4"
                                              Label="Alternativa D"
                                              Variant="Variant.Text"
                                              Disabled="@AlternativaModel4.alternativaAdicionada"
                                              InputType="InputType.Text" />
                            </MudPaper>
                            <MudRadioGroup @bind-Value="AlternativaModel4!.IsCorreta">
                                <MudRadio Value="true"
                                          Color="Color.Secondary"
                                          Size="Size.Large"
                                          Disabled="botaoDasOpcoesCorretas"
                                          @onchange="(e) => MarcarAlternativaComoCorreta(AlternativaModel4)">
                                    Alternativa Correta?
                                </MudRadio>
                            </MudRadioGroup>
                        </MudItem>
                        <MudItem xs="12">
                            <div class="mb-4">
                                <MudButton OnClick="(() => AdicionarAlternativa(AlternativaModel4))"
                                           Variant="Variant.Filled"
                                           Color="Color.Success"
                                           Disabled="@AlternativaModel4.alternativaAdicionada">
                                    Adicionar Alternataiva D
                                </MudButton>
                            </div>
                        </MudItem>
                    </MudGrid>
                </div>

                <div class="d-flex align-center justify-center">
                    <MudButton OnClick="(()=> AddPerguntaNaProva())"
                               Variant="Variant.Filled"
                               Color="Color.Success"
                               Style="margin-bottom: 20px; margin-top: 15px"
                               Disabled="@habilitarBotaoAddPergunta">
                        Adicionar Pergunta
                    </MudButton>
                </div>

            </MudForm>
        </MudContainer>
    </MudPaper>

}





@code {
    [Inject]
    public NavigationManager? NavigationManager { get; set; }

    [Parameter]
    public int? NumeroQuestao { get; set; }

    MudForm form = new MudForm();

    public Questao UmaQuestao { get; set; } = new();

    public List<Questao> ListaQuestoes { get; set; } = new List<Questao>();

    public Alternativa? AlternativaModel1 { get; set; } = new()
        {
            OpcaoAlternativa = EOpcaoAlternativa.A
        };

    public Alternativa AlternativaModel2 { get; set; } = new()
        {
            OpcaoAlternativa = EOpcaoAlternativa.B
        };

    public Alternativa AlternativaModel3 { get; set; } = new()
        {
            OpcaoAlternativa = EOpcaoAlternativa.C
        };

    public Alternativa AlternativaModel4 { get; set; } = new()
        {
            OpcaoAlternativa = EOpcaoAlternativa.D
        };

    public List<Alternativa> ListaAlternativas { get; set; } = new();


    public List<Pergunta> ListaPerguntas { get; set; } = new();

    public Pergunta UmaPergunta { get; set; } = new();


    bool success;
    string[ ] errors = { };


    bool desabilitarAlternativas = false;

    bool habilitarBotaoAddPergunta = true;

    bool botaoADDProvaCorreta = false;


    bool botaoDasOpcoesCorretas = false;


    bool mostrarDialog = false;


    public string? Erros { get; set; } = string.Empty;
    public string? Success { get; set; } = string.Empty;

    private bool mostrarAlert = false;
    private bool fecharAlert = false;


    protected override void OnInitialized( )
    {
        ListaAlternativas.Add(AlternativaModel1!);
        ListaAlternativas.Add(AlternativaModel2);
        ListaAlternativas.Add(AlternativaModel3);
        ListaAlternativas.Add(AlternativaModel4);

    }


    private void MarcarAlternativaComoCorreta(Alternativa alternativaSelecionada)
    {
        alternativaSelecionada.IsCorreta = true;

        foreach (var alternativa in ListaAlternativas)
        {
            if (alternativa != alternativaSelecionada)
            {
                alternativa.IsCorreta = false;
            }
        }
    }


    private void AdicionarAlternativa(Alternativa alternativa)
    {
        if (!string.IsNullOrWhiteSpace(alternativa.TextoDasAlternativa))
        {
            alternativa.alternativaAdicionada = true;
            AddAlternativaNaPergunta(alternativa);
        }
        else
        {
            OpenDialog($"Campo inválido na Pergunta {NumeroQuestao}º", 
            $"Por favor, preencha a alternativa ({alternativa.OpcaoAlternativa}) antes de continuar."
            , DialogPosition.Center);
        }
    }


    private void AddAlternativaNaPergunta(Alternativa alternativaModel)
    {
        if (ListaAlternativas.All(x => !string.IsNullOrWhiteSpace(x.TextoDasAlternativa)))
        {
            desabilitarAlternativas = true;
            habilitarBotaoAddPergunta = false;
        }
    }

    private void AddPerguntaNaProva()
    {
        if (ListaAlternativas.All(x => x.IsCorreta == false))
        {
            OpenDialog($"Nenhuma Alternativa marcada como Correta na pergunta {NumeroQuestao}º", 
                       "Por favor, escolha pelo menos uma alternativa como correta.", 
                       DialogPosition.TopCenter);
        }

        if (string.IsNullOrEmpty(UmaPergunta.EnunciadoDaPergunta))
        {
            OpenDialog($"Enunciado da Pergunta {NumeroQuestao}º Não Declarada!",
                        $"Por favor, digite o enunciado da pergunta {NumeroQuestao}º antes de continuar.", 
                        DialogPosition.Center);
        }

        if (ListaAlternativas.Count() > 0 && ListaAlternativas.Any(x => x.IsCorreta == true)
        && !string.IsNullOrEmpty(UmaPergunta.EnunciadoDaPergunta))
        {
            UmaQuestao.ListaAlternativas.AddRange(ListaAlternativas);

            ListaQuestoes.Add(UmaQuestao);

            UmaPergunta.Questoes.AddRange(ListaQuestoes);

            ListaPerguntas.Add(UmaPergunta);

            Prova.ProvaInstancia.Perguntas.AddRange(ListaPerguntas);

            habilitarBotaoAddPergunta = true;

            botaoDasOpcoesCorretas = true;

            VerificarProvaQntERedirecionar();
        }
    }


    private void VerificarProvaQntERedirecionar( )
    {
        if (Prova.ProvaInstancia.Perguntas.Count() == Prova.ProvaInstancia.QuantidadePerguntas)
        {
            NavigationManager!.NavigateTo("/VerificarProva");
        }
    }


    private void OpenDialog(string titulo, string conteudo, DialogPosition dialogPosition)
    {
        var parameters = new DialogParameters<DialogGenerico>()
        {
            {x => x.Titulo, titulo},
            {x => x.Conteudo, conteudo}
        };

        var options = new DialogOptions()
        { 
            CloseButton = false, 
            MaxWidth = MaxWidth.ExtraSmall,
            Position = dialogPosition,
           
        };

        DialogService.Show<DialogGenerico>("Confirmaçao", parameters, options);
    }


    private void CloseMe(bool value)
    {
        if (value)
        {
            fecharAlert = false;
        }
        else
        {
            mostrarAlert = false;
        }
    }
    private void ShowAlerts( )
    {
        mostrarAlert = true;
        fecharAlert = true;
    }

}

