﻿
@inject ProvaService Prova
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

@if (Prova.ProvaInstancia.ProvaFinalizada)
{
    NavigationManager.NavigateTo("resultadoProva");
}
@if (string.IsNullOrEmpty(Prova.ProvaInstancia.NomeProfessor))
{
    <MudText Typo="Typo.h3"
             Class="d-flex align-center justify-center"
             Color="Color.Warning">
        Não existe uma prova!!!
    </MudText>

    <MudButton ButtonType="ButtonType.Button"
               Variant="Variant.Filled"
               Color="Color.Error"
               Size="Size.Small"
               Href="/criarProva"
               Class="d-flex align-center"
               Style="margin-top: 15px;">
        Clique Aqui para Criar uma Prova
    </MudButton>
}
else @if (Prova.ProvaInstancia.PerguntasCriadas == true)
{
    NavigationManager!.NavigateTo("verificarProva");
}

else
{

    <MudPaper Height="100%" Width="100%">
        <MudContainer MaxWidth="MaxWidth.Medium">
            <MudForm @ref="@form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudText Typo="Typo.h4"
                         Class="d-flex align-center justify-center"
                         Style="margin-top: 45px; margin-bottom: 15px;">
                    Pegunta (@NumeroQuestao)
                </MudText>

                <div class="mb-5">
                    <MudPaper Style="margin-bottom: 40px;">
                        <MudText Class="mud-spacing-md pd-4" Style="font-size: 20px;">
                            <b>Digite o Enunciado da {@NumeroQuestao} Pergunta   </b>
                        </MudText>
                        <MudTextField @bind-Value="UmaPergunta.EnunciadoDaPergunta"
                                      Lines="3"
                                      T="string"
                                      Required="true"
                                      RequiredError="Campo Obrigatorio"
                                      Label="Enunciado da Questão"
                                      HelperText="Limite de 300 Caracteres"
                                      Validation="@(new StringLengthAttribute(300)
                                      {ErrorMessage= "Limite Máximo de 300 Caracteres"})"
                                      Disabled="@BotaoDasOpcoesCorretas"
                                      Variant="Variant.Text" />
                    </MudPaper>
                </div>


                <MudRadioGroup @bind-Value="OpcaoSelecionadaRadio">
                    <div class="mb-3 mt-5">
                        <MudGrid>
                            <MudItem sm="12" Class="mud-elevation-4 mud-spacing">
                                <MudPaper>
                                    <MudTextField @bind-Value="AlternativaModel1!.TextoDasAlternativa"
                                                  Required="true"
                                                  RequiredError="Campo Obrigatório"
                                                  Lines="3"
                                                  Label="Alternativa A"
                                                  InputType="InputType.Text"
                                                  Variant="Variant.Text"
                                                  HelperText="Limite de 300 Caracteres"
                                                  Validation="@(new StringLengthAttribute(300)
                                            {ErrorMessage= "Limite Máximo de 300 Caracteres"})"
                                                  Disabled="@AlternativaModel1!.AlternativaAdicionada" />
                                </MudPaper>
                                <MudRadio Value="true"
                                          Color="Color.Secondary"
                                          Size="Size.Large"
                                          Disabled="BotaoDasOpcoesCorretas"
                                          @onchange="(e) => MarcarAlternativaComoCorreta(AlternativaModel1)">
                                    Alternativa Correta?
                                </MudRadio>
                            </MudItem>
                            <MudItem sm="12">
                                <div class="mb-4">
                                    <MudButton OnClick="(() => AdicionarAlternativaBotao(AlternativaModel1!))"
                                               Variant="Variant.Filled"
                                               Color="Color.Success"
                                               Disabled="@AlternativaModel1!.AlternativaAdicionada">
                                        Adicionar Alternativa A
                                    </MudButton>
                                </div>
                            </MudItem>
                        </MudGrid>
                    </div>

                    <div class="mb-3">
                        <MudGrid>
                            <MudItem sm="12" Class="mud-elevation-4 mud-spacing">
                                <MudPaper>
                                    <MudTextField @bind-Value="AlternativaModel2!.TextoDasAlternativa"
                                                  Required="true"
                                                  RequiredError="Campo Obrigatório"
                                                  Lines="3"
                                                  Variant="Variant.Text"
                                                  Label="Alternativa B"
                                                  HelperText="Limite de 300 Caracteres"
                                                  InputType="InputType.Text"
                                                  Validation="@(new StringLengthAttribute(300)
                                            {ErrorMessage= "Limite Máximo de 300 Caracteres"})"
                                                  Disabled="@AlternativaModel2.AlternativaAdicionada" />
                                </MudPaper>
                                <MudRadio Value="true"
                                          Color="Color.Secondary"
                                          Size="Size.Large"
                                          Disabled="BotaoDasOpcoesCorretas"
                                          @onchange="(e) => MarcarAlternativaComoCorreta(AlternativaModel2)">
                                    Alternativa Correta?
                                </MudRadio>
                            </MudItem>
                            <MudItem sm="12">
                                <div class="mb-4">
                                    <MudButton OnClick="(() => AdicionarAlternativaBotao(AlternativaModel2))"
                                               Variant="Variant.Filled"
                                               Color="Color.Success"
                                               Disabled="@AlternativaModel2.AlternativaAdicionada">
                                        Adicionar Alternativa B
                                    </MudButton>
                                </div>
                            </MudItem>
                        </MudGrid>
                    </div>

                    <div class="mb-3">
                        <MudGrid>
                            <MudItem sm="12" Class="mud-elevation-4 mud-spacing">
                                <MudPaper>
                                    <MudTextField @bind-Value="AlternativaModel3!.TextoDasAlternativa"
                                                  Required="true"
                                                  RequiredError="Campo Obrigatório"
                                                  Lines="3"
                                                  Label="Alternativa C"
                                                  Variant="Variant.Text"
                                                  HelperText="Limite de 300 Caracteres"
                                                  InputType="InputType.Text"
                                                  Validation="@(new StringLengthAttribute(300)
                                            {ErrorMessage= "Limite Máximo de 300 Caracteres"})"
                                                  Disabled="@AlternativaModel3.AlternativaAdicionada" />
                                </MudPaper>
                                <MudRadio Value="true"
                                          Color="Color.Secondary"
                                          Disabled="BotaoDasOpcoesCorretas"
                                          @onchange="(e) => MarcarAlternativaComoCorreta(AlternativaModel3)"
                                          Size="Size.Large">
                                    Alternativa Correta?
                                </MudRadio>
                            </MudItem>
                            <MudItem sm="12">
                                <div class="mb-4">
                                    <MudButton OnClick="(() => AdicionarAlternativaBotao(AlternativaModel3))"
                                               Variant="Variant.Filled"
                                               Color="Color.Success"
                                               Disabled="@AlternativaModel3.AlternativaAdicionada">
                                        Adicionar Alternativa C
                                    </MudButton>
                                </div>
                            </MudItem>
                        </MudGrid>
                    </div>

                    <div class="mb-3">
                        <MudGrid Style="margin-bottom: 20px;">

                            <MudItem sm="12" Class="mud-elevation-4 mud-spacing">
                                <MudPaper>
                                    <MudTextField @bind-Value="AlternativaModel4!.TextoDasAlternativa"
                                                  Required="true"
                                                  RequiredError="Campo Obrigatório"
                                                  Lines="3"
                                                  Label="Alternativa D"
                                                  Variant="Variant.Text"
                                                  HelperText="Limite de 300 Caracteres"
                                                  Validation="@(new StringLengthAttribute(300)
                                                    {ErrorMessage= "Limite Máximo de 300 Caracteres"})"
                                                  Disabled="@AlternativaModel4.AlternativaAdicionada"
                                                  InputType="InputType.Text" />
                                </MudPaper>
                                <MudRadio Value="true"
                                          Color="Color.Secondary"
                                          Size="Size.Large"
                                          Disabled="BotaoDasOpcoesCorretas"
                                          @onchange="(e) => MarcarAlternativaComoCorreta(AlternativaModel4)">
                                    Alternativa Correta?
                                </MudRadio>
                            </MudItem>

                            <MudItem sm="12">
                                <div class="mb-4">
                                    <MudButton OnClick="(() => AdicionarAlternativaBotao(AlternativaModel4))"
                                               Variant="Variant.Filled"
                                               Color="Color.Success"
                                               Disabled="@AlternativaModel4.AlternativaAdicionada">
                                        Adicionar Alternativa D
                                    </MudButton>
                                </div>
                            </MudItem>
                        </MudGrid>
                    </div>
                </MudRadioGroup>

                <div class="d-flex align-center justify-center">
                    <MudButton OnClick="(()=> AddPerguntaNaProva())"
                               Variant="Variant.Filled"
                               Color="Color.Success"
                               Style="margin-bottom: 20px; margin-top: 15px; font-size: 25px;"
                               Disabled="@HabilitarBotaoAddPergunta">
                        Adicionar Pergunta
                    </MudButton>
                </div>
            </MudForm>
        </MudContainer>
    </MudPaper>

}





@code {

    [Parameter]
    public int NumeroQuestao { get; set; }

    MudForm form = new MudForm();

    private bool OpcaoSelecionadaRadio { get; set; }


    public Questao UmaQuestao { get; set; } = new();

    public List<Questao> ListaQuestoes { get; set; } = new List<Questao>();


    public Alternativa? AlternativaRadio { get; set; } = new();


    public Alternativa? AlternativaModel1 { get; set; } = new()
        {
            OpcaoAlternativa = EOpcaoAlternativa.A
        };

    public Alternativa AlternativaModel2 { get; set; } = new()
        {
            OpcaoAlternativa = EOpcaoAlternativa.B
        };

    public Alternativa AlternativaModel3 { get; set; } = new()
        {
            OpcaoAlternativa = EOpcaoAlternativa.C
        };

    public Alternativa AlternativaModel4 { get; set; } = new()
        {
            OpcaoAlternativa = EOpcaoAlternativa.D
        };

    public List<Alternativa> ListaAlternativas { get; set; } = new();


    public List<Pergunta> ListaPerguntas { get; set; } = new();

    public Pergunta UmaPergunta { get; set; } = new();


    bool success;

    string[ ] errors = { };


    bool DesabilitarAlternativas = false;

    bool HabilitarBotaoAddPergunta = true;

    bool BotaoAddProvaCorreta = false;

    bool BotaoDasOpcoesCorretas = false;


    public string? Success { get; set; } = string.Empty;


    protected override void OnInitialized( )
    {
        ListaAlternativas.Add(AlternativaModel1!);
        ListaAlternativas.Add(AlternativaModel2);
        ListaAlternativas.Add(AlternativaModel3);
        ListaAlternativas.Add(AlternativaModel4);

    }


    private void MarcarAlternativaComoCorreta(Alternativa alternativaSelecionada)
    {
        var perguntaSelecionada = ListaAlternativas.FirstOrDefault(x => x.OpcaoAlternativa == alternativaSelecionada.OpcaoAlternativa);

        if (perguntaSelecionada != null)
        {
            perguntaSelecionada.IsCorreta = OpcaoSelecionadaRadio;

            ListaAlternativas.ForEach(x =>
            {
                if (x.OpcaoAlternativa != alternativaSelecionada.OpcaoAlternativa)
                {
                    x.IsCorreta = false;
                }
            });
        }

    }



    private void AdicionarAlternativaBotao(Alternativa alternativa)
    {
        if (alternativa.TextoDasAlternativa.Length > 300
                                    ||
            string.IsNullOrWhiteSpace(alternativa.TextoDasAlternativa))
        {
            AbrirDialog($"Campo inválido na Pergunta {NumeroQuestao}º",
            $"Por favor, preencha a alternativa ({alternativa.OpcaoAlternativa}) antes de continuar."
            , DialogPosition.Center);
        }
        else
        {
            alternativa.AlternativaAdicionada = true;
            DesabilitarAlternativas = true;

        }

        if (ListaAlternativas.All(x => x.AlternativaAdicionada == true))
        {
            HabilitarBotaoAddPergunta = false;
        }

    }

    private void AddPerguntaNaProva( )
    {
        if (ListaAlternativas.All(x => x.IsCorreta == false))
        {
            AbrirDialog($"Nenhuma Alternativa marcada como Correta na Pergunta ({NumeroQuestao}º)",
                       "Por favor, Escolha uma alternativa como correta.",
                       DialogPosition.TopCenter);
        }

        if (string.IsNullOrEmpty(UmaPergunta.EnunciadoDaPergunta)
                                    ||
            UmaPergunta.EnunciadoDaPergunta.Length > 300)
        {
            AbrirDialog($"Enunciado da Pergunta ({NumeroQuestao}º) Não Declarada!",
                        $"Por favor, Verifique o Enunciado da pergunta {NumeroQuestao}º antes de continuar.",
                        DialogPosition.Center);
        }

        if (ListaAlternativas.Count() > 0 && ListaAlternativas.Any(x => x.IsCorreta == true)
                                        &&
        !string.IsNullOrEmpty(UmaPergunta.EnunciadoDaPergunta)
                                        &&
         UmaPergunta.EnunciadoDaPergunta.Length <= 300)
        {
            UmaQuestao.ListaAlternativas.AddRange(ListaAlternativas);

            ListaQuestoes.Add(UmaQuestao);

            UmaPergunta.NumeroPergunta = NumeroQuestao;
            UmaPergunta.Questoes.AddRange(ListaQuestoes);

            ListaPerguntas.Add(UmaPergunta);

            Prova.ProvaInstancia.Perguntas.AddRange(ListaPerguntas);

            HabilitarBotaoAddPergunta = true;

            BotaoDasOpcoesCorretas = true;

            VerificarProvaQntERedirecionar();
        }
    }


    private void VerificarProvaQntERedirecionar( )
    {
        if (Prova.ProvaInstancia.Perguntas.Count() == Prova.ProvaInstancia.QuantidadePerguntas)
        {
            Prova.ProvaInstancia.PerguntasCriadas = true;
            NavigationManager.NavigateTo("verificarProva");
        }
    }


    private void AbrirDialog(string titulo, string conteudo, DialogPosition dialogPosition)
    {
        var parameters = new DialogParameters<DialogGenerico>()
        {
            {x => x.Titulo, titulo},
            {x => x.Conteudo, conteudo},
            {x => x.TextoButao, "Ok"}
        };

        var options = new DialogOptions()
            {
                CloseButton = false,
                MaxWidth = MaxWidth.ExtraSmall,
                Position = dialogPosition,

            };

        DialogService.Show<DialogGenerico>("Confirmaçao", parameters, options);
    }


}