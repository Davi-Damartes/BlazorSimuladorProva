@page "/"

@inject ProvaService Prova
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<PageTitle>Simulador Prova</PageTitle>
@if (!string.IsNullOrEmpty(Prova.ProvaInstancia.NomeProfessor))
{
    NavigationManager.NavigateTo("/CriarPerguntas");
}
else
{
    <MudPaper Height="100%" Width="100%">
        <MudContainer MaxWidth="MaxWidth.Large" Style="margin-bottom: 80px">
            <div class="d-flex align-center justify-center">
                <MudText Typo="Typo.h2" Class="anton-sc-regular" Style="font-family: FontTitulo">
                    Bem-Vindo ao simulador de Prova online
                </MudText>
            </div>
            <div class="d-flex align-center justify-center">
                <MudText Typo="Typo.h4" Style="font-family: FontConteudo; margin-top: 20px;">
                    Um simulador simples e prática na Criação e Realização de Provas.
                </MudText>
            </div>
            <div class="d-flex align-center justify-center">
                <MudButton Href="/CriarProva" Color="Color.Error"
                           Variant="Variant.Filled"
                           Size="Size.Large"
                           Style="font-size: 30px; margin-top: 25px; margin-bottom: 40px;; border-radius: 18px;">
                    Clique aqui para Criar a sua Prova!!!
                </MudButton>
            </div>
           @*  <div class="d-flex align-center justify-center">
                <MudButton OnClick="DialogGenerico"
                           Color="Color.Success"
                           Variant="Variant.Filled"
                           Style="margin-top: 40px;">
                    Teste Dialog Generico
                </MudButton>
            </div>
            <div class="d-flex justify-center align-center;">
                <MudButton OnClick="DialogProva"
                           Color="Color.Success"
                           Variant="Variant.Filled"
                           Style="margin-top: 40px;">
                    Teste Dialog
                </MudButton>
            </div> *@

            <div class="d-flex align-center justify-center">
                <MudChip Color="Color.Info" T="string" Variant="Variant.Filled"
                            Style="font-size: 40px">
                    @CodigoProva
                </MudChip>
            </div>
            <div class="d-flex align-center justify-center">
                <MudText Color="Color.Info" Style="margin-top: 5px"
                         Typo="Typo.h5" Align="Align.Center">
                    Digite o código no campo abaixo para Enviar a Prova!
                </MudText>
            </div>
            <div class="d-flex align-center justify-center ">
                <MudPaper>
                    <MudFocusTrap Disabled="Disabled" DefaultFocus="DefaultFocus">
                        <MudTextField @bind-Value="@CodigoDigitadoUser" 
                                      T="string" Style="font-size: 20px;  align-content: center;justify-content: center; display: flex;" 
                        Variant="Variant.Outlined" />
                    </MudFocusTrap>
                </MudPaper>
            </div>

            <div class="d-flex align-center justify-center">
                <MudButton OnClick="OpenDialogAsync"
                           Color="Color.Success"
                           Variant="Variant.Filled"
                           Style="margin-top: 120px;">
                    Teste Dialog
                </MudButton>
            </div>

            <MudRadioGroup @bind-Value="ProvaResposta!.RespostaSelecionada"
                           T="EOpcaoAlternativa"
                           Style="margin-left: 15px"
                           Required="true"
                           RequiredError="Campo obrigado">
                @foreach (var alternativa in Alternativas)
                {
                    <MudItem xs="12" Class=" mud-elevation-4 mud-spacing">
                        <MudPaper Class="d-flex align-center justify-between mud-width-full py-8"
                                  Style="margin-bottom: 20px;" Width="100%">
                            <MudRadio Value="alternativa.OpcaoAlternativa"
                                      Color="Color.Secondary"
                                      Size="Size.Large"
                                      @onchange="(e) => GabaritoProva(alternativa)">
                            </MudRadio>
                            <MudText Class="QuebraLinha"
                                     Style="@($"color:{Theme.Palette.Dark}; background:{Colors.Shades.White};    font-size: 25px; Width: 80%;")"
                                     Align="Align.Start">
                                <b>@alternativa.OpcaoAlternativa)</b>@alternativa.TextoDasAlternativa
                            </MudText>
                        </MudPaper>
                    </MudItem>
                }
            </MudRadioGroup>
        </MudContainer>
    </MudPaper>
}


@code {

    bool Disabled { get; set; }

    DefaultFocus DefaultFocus { get; set; } = DefaultFocus.FirstChild;


    MudTheme MyCustomTheme = new MudTheme()
        {
            Typography = new Typography()
            {
                H2 = new H2()
                {
                    FontFamily = new[ ] { "Lobster", "Helvetica", "Arial", "sans-serif" }
                }
            }
        };
    MudTheme Theme = new MudTheme();


    public List<Questao> Questoes { get; set; } = new();

    public List<Alternativa> Alternativas { get; set; } = new();


    public RespostasDaProva? ProvaResposta { get; set; } = new();

    public Alternativa? AlternativaProva { get; set; } = new();

    public string? CodigoProva { get; set; }

    public string? CodigoDigitadoUser { get; set; }




    private void GabaritoProva(Alternativa alternativa)
    {
        if (alternativa!.IsCorreta == true)
        {
            //ProvaResposta!.NumeroPergunta.Add(pergunta.NumeroPergunta);
            ProvaResposta.Acertou.Add(true);

            ProvaResposta.QntAcertos += 1;
        }
        else
        {
            ProvaResposta.Acertou.Add(false);
            ProvaResposta.QntAcertos = 0;
        }
    }


    protected override void OnInitialized( )
    {
        Questoes = GerarQuestoesFalsas(2);
        Alternativas = GerarAlternativasFalsas();
        CodigoProva = GerarCodigo();
    }

    public List<Questao> GerarQuestoesFalsas(int numeroDeQuestoes)
    {
        var questoes = new List<Questao>();

        for (int i = 1; i <= numeroDeQuestoes; i++)
        {
            var questao = new Questao
                {
                    ListaAlternativas = GerarAlternativasFalsas()
                };

            questoes.Add(questao);
        }

        return questoes;
    }

    List<Alternativa> GerarAlternativasFalsas( )
    {
        var alternativas = new List<Alternativa>
            {
                new Alternativa
                {
                    TextoDasAlternativa = "Alternativa A",
                    IsCorreta = false,
                    alternativaAdicionada = true,
                    OpcaoAlternativa = EOpcaoAlternativa.A
                },
                new Alternativa
                {
                    TextoDasAlternativa = "Alternativa B",
                    IsCorreta = true,
                    alternativaAdicionada = true,
                    OpcaoAlternativa = EOpcaoAlternativa.B
                },
                new Alternativa
                {
                    TextoDasAlternativa = "Alternativa C",
                    IsCorreta = false,
                    alternativaAdicionada = true,
                    OpcaoAlternativa = EOpcaoAlternativa.C
                },
                new Alternativa
                {
                    TextoDasAlternativa = "Alternativa D",
                    IsCorreta = false,
                    alternativaAdicionada = true,
                    OpcaoAlternativa = EOpcaoAlternativa.D
                }
            };

        return alternativas;
    }

    private void DialogGenerico( )
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,

            };

        var parameters = new DialogParameters<DialogGenerico>
        {
            { x => x.Titulo,  "Verificação do Envio da Prova !!!"},

            { x => x.Conteudo, "Você tem certeza? Essa ação não pode ser defeita!" },

            { x => x.TextoButao, "Confirmar"},

        };

        DialogService.Show<DialogGenerico>("ConfirmarProva", parameters, options);

    }
    private void DialogProva( )
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,

                CloseButton = true
            };

        var parameters = new DialogParameters<DialogConfirmarProva>
        {
            { x => x.Titulo,  "Verificação do Envio da Prova !!!"},

            { x => x.Conteudo, "Você tem certeza? Essa ação não pode ser defeita!" },

            { x => x.ButtonText, "Teste"},


            { x => x.Color, Color.Success }

        };

        DialogService.Show<DialogConfirmarProva>("ConfirmarProva", parameters, options);

    }
   
    private async Task OpenDialogAsync( )
    {
        var CodigoRandom = GerarCodigo();

        var diagloParams = new DialogParameters<DialogEnvioProvaCodigo>()
        {
            {x => x.CodigoRandom, CodigoRandom},
        };
        var diagloOptions = new DialogOptions()
            {
                CloseButton = false,
                MaxWidth = MaxWidth.Large,

                Position = DialogPosition.Center,

            };
        var options = new DialogOptions { CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<DialogEnvioProvaCodigo>(" ", diagloParams, diagloOptions);
        // var result = await dialog.Result;
        // if (!result.Canceled)
        // {
        //     if (CodigoRandom == result.Data.ToString())
        //     {

        //     }
        // }
    }
   
    public string GerarCodigo( )
    {
        Random aleatorio = new Random();

        // String that contain both alphabets and numbers
        String strings_Letras = "abcdefghijklmnopqrstuvwxyz0123456789";
        int size = 8;

        // Initializing the empty string
        String stringAleatoria = "";

        for (int i = 0; i < size; i++)
        {

            // Selecting a index randomly
            int indexAleatorio = aleatorio.Next(strings_Letras.Length);

            stringAleatoria = stringAleatoria + strings_Letras[indexAleatorio];
        }

        return stringAleatoria;
    }


}




