@page "/VerificarProva"

@inject ProvaService Prova
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<PageTitle>Verificar Prova</PageTitle>

@if (Prova.ProvaInstancia.Perguntas.Count() == 0)
{
    <MudContainer>
        <MudText Typo="Typo.h3"
                 Align="Align.Center"
                 Style="margin-top: 18px;"
                 Color="Color.Warning">
            <b>Não há perguntas Adicionadas a Prova!</b>
        </MudText>
        
        <div class="d-flex justify-center align-center">
            <MudButton ButtonType="ButtonType.Button"
                       Variant="Variant.Filled"
                       Color="Color.Error"
                       Size="Size.Small"
                       Href="/CriarPerguntas"
                       Class="d-flex align-center"
                       Style="margin-top: 20px; font-size: 35px; border-radius: 19px;">
                Clique Aqui para Adicionar as Perguntas!
            </MudButton>
        </div>
    </MudContainer>

}
else if (Prova.ProvaInstancia.ProvaCriada == true)
{
    NavigationManager.NavigateTo("/RealizarProva");
}
else
{
    <div class="d-flex flex-grow-1 justify-content-center align-items-center" >
        <MudContainer MaxWidth="MaxWidth.Large" Style="height: 100vh; margin-top: 30px;">
            <MudPaper Elevation="25" Class="p-4" Style="width: 100%;">

                <MudText Class="mud-secondary-dark" 
                         Typo="Typo.h4"
                         Align="Align.Center"
                         Style="font-family: FontConteudo;">
                    Por favor, revise cuidadosamente as perguntas abaixo para garantir 
                    que não haja erros antes de confirmar o envio.

                </MudText>
                @foreach (var pergunta in ListaPerguntas)
                {
                    <MudText Typo="Typo.h5"
                             Class="mud-secondary-text QuebraLinha"
                             Color="Color.Info">
                        <b>(@pergunta.NumeroPergunta) @pergunta.EnunciadoDaPergunta</b>
                    </MudText>

                    @foreach (var questao in pergunta.Questoes)
                    {

                        @foreach (var alternativa in questao.ListaAlternativas)
                        {
                            <MudText Typo="Typo.h5" Color="Color.Info"
                                     Class="mud-secondary-text QuebraLinha"
                                     Style="font-family: FontConteudo">
                                     @alternativa.OpcaoAlternativa.ToString()) @alternativa.TextoDasAlternativa
                            </MudText>
                        }
                       <br />
                       <br />
                    }
                }

                <div class="d-flex justify-center align-center">
                    <MudButton OnClick="ConfirmarEnvio"
                               ButtonType="ButtonType.Button"
                               Variant="Variant.Filled"
                               Color="Color.Success"
                               Size="Size.Large"
                               Style="margin-top: 15px; margin-bottom: 60px;">
                        Clique Aqui para Confirmar o envio da Prova!!!
                    </MudButton>
                </div>
            </MudPaper>
        </MudContainer>
    </div>
}


@code {

    private int contador = 1;

    public Pergunta PerguntaAtual { get; set; } = new();

    public List<Pergunta> ListaPerguntas { get; set; } = new();

    public bool ProvaConfirmada = false;


    protected override void OnInitialized( )
    {
        ListaPerguntas = Prova.ProvaInstancia.Perguntas;
    }

    public async Task ConfirmarEnvio( )
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,

            };

        var parameters = new DialogParameters<DialogConfirmarProva>
        {
            { x => x.Titulo,  "Verificação do Envio da Prova !!!"},

            { x => x.Conteudo, "Você tem certeza? Essa ação não pode ser defeita!" },

            { x => x.Color, Color.Success }

        };

        var dialog = DialogService.Show<DialogConfirmarProva>("ConfirmarProva", parameters, options);


        var result = await dialog.Result;

        if (!result.Canceled && result.Data is bool isConfirmed && isConfirmed)
        {
            Prova.ProvaInstancia.ProvaCriada = true;

            Prova.ProvaInstancia.HoraEnvio = DateTime.Now;


            await Task.Delay(2000);
            NavigationManager.NavigateTo("/RealizarProva");
            
        }
    }


}


