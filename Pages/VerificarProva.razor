@page "/verificarProva"

@inject ProvaService Prova

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<PageTitle>Verificar Prova</PageTitle>

@if (Prova.ProvaInstancia.ProvaFinalizada)
{
    NavigationManager.NavigateTo("resultadoProva");
}
@if (Prova.ProvaInstancia.Perguntas.Count() == 0)
{
    NavigationManager.NavigateTo("criarPerguntas");
}
else if (Prova.ProvaInstancia.ProvaCriada == true)
{
    NavigationManager.NavigateTo("realizarProva");
}
else
{
    <div class="d-flex flex-grow-1 justify-content-center align-items-center">
        <MudContainer MaxWidth="MaxWidth.Large" Style="height: 100vh; margin-top: 30px;">
            <MudPaper Elevation="25" Class="p-4" Style="width: 100%;">

                <MudText Class="mud-secondary-dark"
                         Typo="Typo.h4"
                         Align="Align.Center"
                         Color="Color.Warning"
                         Style="font-family: FontConteudo; margin-bottom: 40px;">
                    <b>
                        Por favor, revise cuidadosamente as perguntas abaixo para garantir
                        que não haja erros antes de confirmar o envio!!!
                    </b>

                </MudText>
                @foreach (var pergunta in ListaPerguntas.OrderBy(x => x.NumeroPergunta))
                {
                    <MudText Typo="Typo.h5" Class="QuebraLinha"
                             Style="margin-bottom: 15px;">
                        <b>(@pergunta.NumeroPergunta)@pergunta.EnunciadoDaPergunta</b>
                    </MudText>

                    @foreach (var questao in pergunta.Questoes)
                    {

                        @foreach (var alternativa in questao.ListaAlternativas)
                        {

                            @if (alternativa.IsCorreta)
                            {
                                <MudText Typo="Typo.h5" Color="Color.Success"
                                         Style="font-family: FontConteudo; margin-bottom: 15px;"
                                         Class="mud-secondary-text QuebraLinha">
                                    <b>@alternativa.OpcaoAlternativa)</b>@alternativa.TextoDasAlternativa
                                </MudText>
                            }
                            else
                            {
                                <MudText Typo="Typo.h5" Color="Color.Error"
                                         Style="font-family: FontConteudo; margin-bottom: 15px;"
                                         Class="mud-secondary-text QuebraLinha">
                                    <b>@alternativa.OpcaoAlternativa)</b>@alternativa.TextoDasAlternativa
                                </MudText>

                            }
                        }
                    }
                }

                <div class="d-flex justify-center align-center">
                    <MudButton OnClick="ConfirmarEnvio"
                               ButtonType="ButtonType.Button"
                               Variant="Variant.Filled"
                               Color="Color.Success"
                               Size="Size.Large"
                               Style="margin-top: 15px; margin-bottom: 60px; font-size: 25px; border-radius: 18px;">
                        Confirmar o envio da Prova!!!
                    </MudButton>
                </div>
            </MudPaper>
        </MudContainer>
    </div>
}


@code {

    public List<Pergunta> ListaPerguntas { get; set; } = new();

    protected override void OnInitialized( )
    {
        ListaPerguntas = Prova.ProvaInstancia.Perguntas;
    }

    public async Task ConfirmarEnvio( )
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,

            };

        var parameters = new DialogParameters<DialogConfirmarProva>
        {
            { x => x.Titulo,  "Verificação do Envio da Prova !!!"},

            { x => x.Conteudo, "Você tem certeza? Esta ação não pode ser defeita!" },

            { x => x.Color, Color.Success }

        };

        var dialog = DialogService.Show<DialogConfirmarProva>("ConfirmarProva", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled && result.Data is bool isConfirmed && isConfirmed)
        {
            Prova.ProvaInstancia.ProvaCriada = true;

            Prova.ProvaInstancia.HoraEnvio = DateTime.Now;


            await Task.Delay(1500);
            NavigationManager.NavigateTo("realizarProva");

        }
    }


}