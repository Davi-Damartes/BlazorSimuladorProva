@page "/VerificarProva"

@inject ProvaService ProvaFinal
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Verificar Prova</PageTitle>

@if (ProvaFinal.ProvaInstancia.Perguntas.Count() == 0)
{
        <MudText Typo="Typo.h3"
                 Class="d-flex align-center justify-center"
                 Color="Color.Warning">
            Não há perguntas criadas!
        </MudText>

        <MudButton ButtonType="ButtonType.Button"
                   Variant="Variant.Filled"
                   Color="Color.Error"
                   Size="Size.Small"
                   Href="/CriarPerguntas"
                   Class="d-flex align-center"
                   Style="margin-top: 15px;">
            Clique Aqui para Adicionar Perguntas
        </MudButton>

}
else
{ 
    <MudPaper Height="100%" Width="100%">
        <MudContainer MaxWidth="MaxWidth.Medium">
            <MudPaper Height="100%" Width="100%" Square="true" Style="@($"color:{Colors.Purple.Accent3};")">

                <MudText Typo="Typo.h4" Color="Color.Tertiary" Style="margin-bottom: 25px;">

                    <MudText Class="mud-secondary-dark" Typo="Typo.h5">Professor: <u>@ProvaFinal.ProvaInstancia.NomeProfessor</u>
                        Verifique as Pergunta para ver se tem algum erro!!!
                    </MudText>
                </MudText>

                @foreach (var pergunta in ListaPerguntas)
                {
                    <MudText Typo="Typo.h5" Class="mt-5 mud-secondary-text">
                        @pergunta.EnunciadoDaPergunta
                    </MudText>

                    @foreach (var questao in pergunta.Questoes)
                    {

                        @foreach (var alternativa in questao.ListaAlternativas)
                        {
                            <MudText Typo="Typo.h5" Class="mud-secondary-text" Style="margin-bottom: 20px;">
                                @alternativa.OpcaoAlternativa.ToString()) @alternativa.TextoDasAlternativa
                            </MudText>
                        }
                    }
                }

                <MudButton OnClick="ConfirmarEnvio"
                           ButtonType="ButtonType.Button"
                           Variant="Variant.Filled"
                           Color="Color.Success"
                           Size="Size.Large"
                           Href="/RealizarProva"
                           Style="margin-top: 15px;">
                    Clique Aqui para Confirmar o envio da Prova!!!
                </MudButton>

            </MudPaper>
        </MudContainer>
    </MudPaper>
}


@code {

    public Pergunta PerguntaAtual { get; set; } = new();

    public List<Pergunta> ListaPerguntas { get; set; } = new();

    public bool ProvaConfirmada = false;


    protected override void OnInitialized( )
    {
        ListaPerguntas = ProvaFinal.ProvaInstancia.Perguntas;
    }
    private async Task ConfirmarEnvio()
    {
        await ConfirmarEnvioProva();

    }
    private async Task ConfirmarEnvioProva( )
    {
        var parameters = new DialogParameters<DialogConfirmarProva> 
        { 
            { x => x.Titulo,  "Verificação do Envio da Prova !!!"},

            { x => x.Conteudo, "Você tem certeza? Essa ação não pode ser defeita!" }

        };

        var dialog = await DialogService.ShowAsync<DialogConfirmarProva>("Delete Server", parameters);

    }

    
}


